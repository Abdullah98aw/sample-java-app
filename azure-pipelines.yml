trigger: 
  - master

variables: 
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'c621bc8e-c98e-48ad-b5de-07d7f63247b6'

  # Web app name
  webAppName: 'nls-training-java-maven'

  # Environment name
  environmentName: 'nls-training-java-maven'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: Build, Test and Publish
    jobs:
      - job: MavenPackageAndPublish
        displayName: Maven Package and Publish Artifacts
        pool:
          vmImage: $(vmImageName)
        
        steps:
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              mavenOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              goals: 'package'
          
          - task: CopyFiles@2
            displayName: 'Copy Files to artifact staging directory'
            inputs:
                SourceFolder: '$(System.DefaultWorkingDirectory)'
                Contents: '**/target/*.?(war|jar)'
                TargetFolder: $(Build.ArtifactStagingDirectory)
  
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'drop'
            
  - stage: Deploy 
    displayName: Deploy to VM
    jobs: 
      - deployment: VMDeploy
        displayName: web
        environment: vm-azure
        strategy:
            runOnce:
              preDeploy:
                steps:
                - download: current
                  artifact: drop
              deploy:
                steps:
                - task: Bash@3
                  inputs:
                    targetType: 'inline'
                    script: |
                      # Modify deployment script based on the app type
                      echo "Starting deployment script run"
                      sudo cp '$(Pipeline.Workspace)/**.war' '/opt/tomcat/webapps'
                      sudo systemctl restart tomcat
                      # sudo java -jar '$(Pipeline.Workspace)/drop/**/target/*.jar'
              routeTraffic:
                steps:
                - script: echo routing traffic
              postRouteTraffic:
                steps:
                - script: echo health check post-route traffic
              on:
                failure:
                  steps:
                  - script: echo Restore from backup! This is on failure
                success:
                  steps:
                  - script: echo Notify! This is on success